.arch armv4 /*该句去掉无影响*/ /*选择目标体系,相当于编译时的 -march 参数*/
.global _start /*该句去掉有警告*/ /*伪指令,让 .global 过的符号对链接器可见*/

.equ REG_FIFO,	0x50000020  /*伪指令,将 0x50000020 用 宏 REG_FIFO 代替*/

.text /*伪指令,表示从房钱位置开始的内容被归并到代码段中*/
.align 2 /*在链接时,迫使被修饰的内容对齐,在本句中,表示代码段对齐,按照2字节*/

_start:  /*标号*/
	ldr r0,=REG_FIFO  /*参数1*/ /*语句,操作码寻址方式为立即数寻址*/
	adr	r1,.L0        /*参数2*/ /*指令,操作码寻址方式为非寄存器(什么寻址方式)寻址*/
	bl helloworld     /*相对跳转指令，与位置无关代码,将下一个指令的地址复制到 lr（r14，链接寄存器）中*/
    /*将 r0 r1  返回地址(r14中的值) 栈帧(该语句所在的函数名地址)  放入栈中,在 下一个函数开头开始在栈中放置局部变量*/
    /*调用前并没有设置sp,因为arm 的 不需要设置sp还是什么,此时sp是有初始化值的*/


    /*bl helloworld 之后返回到 B .L1 , 该语句实现循环*/
.L1:
	b	.L1 /*不带连接,不设置 lr 寄存器*/

.align 2
.L0:
	.ascii	"helloworld\n\0" /*在内存中定义字符串,该字符串在 .text 段中,印证了代码段中有只读数据*/

/*
   根据<ARM-thumb 过程调用标准>
   r0-r3
            用作传入函数参数，传出函数返回值。
            在子程序调用之间，可以将 r0-r3 用于任何用途。
            被调用函数在返回之前不必恢复 r0-r3。如果调用函数需要再次使用 r0-r3 的内容，则它必须保留这些内容。
   r4-r11
            被用来存放函数的局部变量。如果被调用函数使用了这些寄存器，它在返回之前必须恢复这些寄存器的值。
   r12
            是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。
            在过程调用之间，可以将它用于任何用途。被调用函数在返回之前不必恢复 r12。
   13
            是栈指针 sp。它不能用于任何其它用途。sp 中存放的值在退出被调用函数时必须与进入时的值相同。
   r14
            是链接寄存器 lr。如果您保存了返回地址，则可以在调用之间将 r14 用于其它用途，程序返回时要恢复
   r15
            是程序计数器 PC。它不能用于任何其它用途。
   注意
            在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11
 */
